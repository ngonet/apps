@use "sass:color";
@use "sass:math";

@function get-contrast-color($color) {
  $r: color.channel($color, "red");
  $g: color.channel($color, "green");
  $b: color.channel($color, "blue");
  
  // Calculate relative luminance using sRGB
  $r-srgb: if($r <= 0.03928, math.div($r, 12.92), math.pow(math.div($r + 0.055, 1.055), 2.4));
  $g-srgb: if($g <= 0.03928, math.div($g, 12.92), math.pow(math.div($g + 0.055, 1.055), 2.4));
  $b-srgb: if($b <= 0.03928, math.div($b, 12.92), math.pow(math.div($b + 0.055, 1.055), 2.4));
  
  $luminance: 0.2126 * $r-srgb + 0.7152 * $g-srgb + 0.0722 * $b-srgb;
  
  @return if($luminance > 0.179, #000, #fff);
}

@mixin helper-color($color, $value) {
  .bg-gradient-#{$color} {
    background-color: $value !important;
    background-image: linear-gradient(
      to bottom,
      color.adjust($value, $lightness: 10%),
      color.adjust($value, $lightness: -5%)
    ) !important;
  }
  .bg-gradient-from-#{$color} {
    --#{$prefix}bg-gradient-from: #{$value};
  }
  .bg-gradient-to-#{$color} {
    --#{$prefix}bg-gradient-to: #{$value};
  }
  .hover-bg-#{$color}:hover {
    background-color: rgba(var(--#{$prefix}#{$color}-rgb), var(--#{$prefix}bg-opacity)) !important;

    &:not([class*='bg-opacity-']) {
      --#{$prefix}bg-opacity: 1;
    }
  }
  .theme-#{$color} {
    --#{$prefix}app-theme: #{$value};
    --#{$prefix}app-theme-rgb: #{color.channel($value, "red"), color.channel($value, "green"), color.channel($value, "blue")};
    --#{$prefix}app-theme-color: #{get-contrast-color($value)};
    --#{$prefix}app-theme-color-rgb: #{color.channel(get-contrast-color($value), "red"), color.channel(get-contrast-color($value), "green"), color.channel(get-contrast-color($value), "blue")};

    --#{$prefix}app-theme-hover: #{color.adjust($value, $lightness: -25%)};
    --#{$prefix}app-theme-hover-border-color: #{color.adjust($value, $lightness: -25%)};
    --#{$prefix}app-theme-hover-color: #{get-contrast-color($value)};

    --#{$prefix}app-theme-active: #{color.adjust($value, $lightness: -25%)};
    --#{$prefix}app-theme-active-border-color: #{color.adjust($value, $lightness: -25%)};
    --#{$prefix}app-theme-active-color: #{get-contrast-color($value)};

    --#{$prefix}app-theme-disabled: #{color.adjust($value, $lightness: 25%)};
    --#{$prefix}app-theme-disabled-border-color: #{color.adjust($value, $lightness: 25%)};
    --#{$prefix}app-theme-disabled-color: #{get-contrast-color($value)};

    @if ($color == 'yellow') {
      --#{$prefix}app-theme-color: #{$black};
      --#{$prefix}app-theme-color-rgb: #{color.channel($black, "red"), color.channel($black, "green"), color.channel($black, "blue")};
    }
  }
  @if (
    $color !=
      'gray' and
      $color !=
      'gray-100' and
      $color !=
      'gray-200' and
      $color !=
      'gray-300' and
      $color !=
      'gray-400' and
      $color !=
      'gray-500' and
      $color !=
      'gray-600' and
      $color !=
      'gray-700' and
      $color !=
      'gray-800' and
      $color !=
      'gray-900'
  ) {
    @for $i from 1 through 5 {
      .bg-#{$color}-#{$i * 100} {
        --#{$prefix}bg-opacity: 1;

        background-color: rgba(
          color.adjust($value, $lightness: ((5 - $i) * 20%)),
          var(--#{$prefix}bg-opacity)
        ) !important;
      }
      .text-#{$color}-#{$i * 100} {
        --#{$prefix}text-opacity: 1;

        color: rgba(color.adjust($value, $lightness: ((5 - $i) * 20%)), var(--#{$prefix}text-opacity)) !important;
      }
    }
    @for $i from 6 through 9 {
      .bg-#{$color}-#{$i * 100} {
        --#{$prefix}bg-opacity: 1;

        background-color: rgba(
          color.adjust($value, $lightness: -($i - 5) * 20%),
          var(--#{$prefix}bg-opacity)
        ) !important;
      }
      .text-#{$color}-#{$i * 100} {
        --#{$prefix}text-opacity: 1;

        color: rgba(color.adjust($value, $lightness: -($i - 5) * 20%), var(--#{$prefix}text-opacity)) !important;
      }
    }
  }
}
